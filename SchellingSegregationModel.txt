= The Schelling Segregation Model =


== Modeling Human Behavior ==

Simulating human behavior can be complicated.  People have individual needs, wants and preferences that form the goals they pursue throughout their lives.  People do not pursue their goals in isolation; they compete and cooperate with other people in their families, work, school and community. 

Attempts to simplify the problem of representing human behavior by using aggregate mathematical equations or statistical populations of individuals have been shown to miss important properties of real world behavior. footnote:[Micromotives and Macrobehavior pg. 14] footnote:[Simulation for the Social Scientist pgs. 50-54] footnote:[Simulation for the Social Scientist pgs. 101-102] The problem of building a model of human behavior has to encompass both the individual decisions and the environment which is created by and reacts to those decisions. 

One of the earliest researchers to tackle the problem of systematically modeling the interaction of individual choices with a larger environment is the Nobel Prize winning economist Thomas C. Shelling.   Schelling has a number of interesting accomplishments to his name, but what interests us here is his segregation model.

Schelling built his original segregation model to understand the problem of racial segregation in the United States, but he later expanded the model to cover other types of segregation including gender, language, age and income. 

== Schelling Segregation Model ==

Schelling built his original segregation model to understand the problem of racial segregation in the United States footnote:[Models of Segregation pg. 488], but he later expanded the model to cover other types of segregation including gender, language, age and income footnote:[Micromotives and Macrobehavior pgs. 135-190]. 

Schelling\'s segregation model beautifully illustrates how to simplify individual choice and environmental interaction while preserving the fundamental properties of each.  The Schelling segregation model is simple, but the results can be surprising.  Schelling showed that a small preference for similar neighbors can lead to a highly segregated neighborhood.

A Schelling model consists of people or households in a neighborhood. Each person has a type (white, black, brown, etc.) and a preference for what kind of neighbors would make them happy. A neighborhood is an arrangement of lots, typically in a grid, that can either be empty or contain people.  Schelling experimented with both one and two dimensional neighborhoods.  A person will be happy if their immediate neighbors meet their preference or they will be unhappy and want to move.  Empty lots are not counted in calculating preferences and a person needs to have at least one neighbor before preferences are calculated at all. A person surrounded by empty lots is assumed to be happy.

[width="15%"]
|=========
|O |X |O |-
|O |X |O |-
|X |O |O |-
|- |- |- |-
|=========
[[Figure1]]*Figure 1 Sample Neighborhood*


For the example neighborhood in <<Figure1>> the central X has eight neighbors with two X\'s and six O\'s.  If the center X has a preference for having neighbors like itself of .25 or less it will be happy otherwise it will want to move. The O in the lower right hand corner of the populated area has three neighbors, 2 O\'s and an X and has a similar neighbor score of 2/3 even though it is also adjacent to five empty lots. 

The cycle of the Schelling model is as follows:

1. People are laid out on a neighborhood grid.
2. The unhappy people are identified.
3. Unhappy people try to move to a different place in the neighborhood.
4. Repeat the cycle as desired.

== Schelling in Python ==

An implementation of a Schelling segregation model is provided in the file SchellingSegregationModel.py.  The SchellingSegregationModel code can handle modeling segregation on discrete attributes like race, gender, and religion or on continuous attributes like age and income.  The provided model assumes that unhappy people can move to any empty lot or swap places with any other unhappy person.

A critical part of the model is the Neighborhood class which contains the grid of lots in the neighborhood.  The neighborhood grid forms a torus, or doughnut shape, meaning that the grid wraps around its edges.  The lots may be filled with EmptyLot classes or they may be filled with implementations of the SchellingAgent class representing people.  The move() function on the Neighborhood class contains the code that combines the empty lots and unhappy people and initiates a random swap of unhappy pairs.  The neighborhood class contains a function called writeToCSV() that can be used to save the current state of the neighborhood to a CSV file for examination.

[width="15%"]
|=========
|(0,0) |(1,0) |(2,0)
|(0,1) |(1,1) |(2,1)
|(0,2) |(1,2) |(2,2)
|=========
[[Figure2]]*Figure 2 Doughnut World Coordinates*

In <<Figure2>> the neighbors of the cell at coordinates (1,2) are (0,1),(1,1),(2,1),(0,2),(2,2),(0,0),(1,0) and (2,0).

The people in the neighborhood are represented by classes descended from the SchellingAgent class.   The base SchellingAgent is designed as an ancestor class for representing segregation on discrete variables like race or gender.  The LikesSameAgent class represents a person who wants at least a minimal level of similar neighbors with a discrete attribute like race.  The LikesOthersAgent likes a neighborhood with at least minimal level of neighbors with a discrete attribute that is not the same as itself.  The ContinuousSchellingAgent class inherits from the SchellingAgent class to add support for calculating similarity for continuous attributes like age and income.  The assumption for continuous variables is that similarity does not need to be exact, close will do.  The ContinuousLikesSameAgent and ContinuousLikesOtherAgent are the continuous attribute equivalents of the LikesSameAgent and LikesOtherAgent classes.

In order to use the code in SchellingSegregationModel to model you need a populated neighborhood to feed to the run() function.  There are four neighborhood population helper functions supplied with the model: likesSameNeighborhood, likesOthersNeighborhood,  likesOtherAgeNeighborhood, and likesSameAgeNeighborhood. 


=== Discrimination Drive v. Acceptance Alley ===

A quick introduction to the model code is provided in the function demo(). By default demo builds a segregation model using the likesSameNeighborhood helper function to populate a neighborhood with X\'s and O\'s who have a preference for similar neighbors in a grid of 400 squares. The demo people would like to have .3 of their neighbor the same as themselves.

It is instructive to compare the results of a lightly discriminating neighborhood against a neighborhood that demands diversity.

The default demo function looks at a lightly discriminatory neighborhood where each agent is prepared to have up to 2/3 of its neighbors be differant. 

.Example1 Discrimination Demo Run
>>> import SchellingSegregationModel

>>> demo()

...................................
[(0, (0.192, 0.4881)), (1, (0.0774, 0.6012)), (2, (0.0458, 0.6482)), (3, (0.0287, 0.676)), (4, (0.0143, 0.696)), (5, (0.0115, 0.705)),
 (6, (0.0115, 0.7123)), (7, (0.0, 0.719))]
...................................

image::DiscriminationGraph.png[Light Discrimination Graph]
*Example1 Discrimination Change Over Time*

The demo() function code returns statistics for each turn on neighborhood unhappiness and neighborhood similarity. So on turn 0 of the code run in Example1 the neighborhood was 19% unhappy and the aggregate similarity was 49%.  By the end of the run the neighborhood unhappiness was at 0% and the local similarity was at 72%. The demo function will also save the before and after run states of the neighborhood to CSV files. 

The demo function can also be run with one of the other helper functions for example, likesOthersNeghborhood. In the example run shown in Example 2 it is possible to see how the percentage of similar neighbors went down as time progressed. 

.Example2 Acceptance Demo Run
>>> import SchellingSegregationModel

>>> demo(likesOthersNeighborhood)

...................................
[(0, (0.3492, 0.5133)), (1, (0.1844, 0.4465)), (2, (0.1061, 0.4073)), (3, (0.0922, 0.3991)), (4, (0.0922, 0.3992)), (5, (0.095, 0.3986)), 
(6, (0.1006, 0.3953)), (7, (0.0754, 0.3878)), (8, (0.0782, 0.3866)), (9, (0.081, 0.3873)), (10, (0.067, 0.3815)), (11, (0.0782, 0.3822)),
 (12, (0.0782, 0.38)), (13, (0.0726, 0.3821)), (14, (0.0642, 0.3805)), (15, (0.0782, 0.3804)), (16, (0.0698, 0.3812)), (17, (0.0587, 0.3775)), 
(18, (0.0726, 0.3796)), (19, (0.067, 0.3814))]
...................................

image::DiscriminationGraph.png[Accpeting Neighborhood Graph]
*Example2 Accepting Neighborhood Change Over Time*

It is interesting to note in the results of the two runs how light discrimination can lead to a highly segregated neighborhood but that even a neighborhood that seeks out diversity can take time to move to a more diverse structure.

=== Seperation Street ===

So far we have looked at an example of a lightly discriminatory neighborhood and a neighborhood that values diversity. An obvious question is what a really discriminatory neighborhood looks like?

To explore this question we need to go a little deeper into the provided python code. We will build a highly discriminatory neighborhood, feed it to the run() function and examine the results.

For this run we are using the likesSameNeighborhood function with a size of 20 and a preference of .6. We pass in the neighborhood, a number of turns to run the model and a True to the run() function. The True means that output CSV files will be produced for a before and after picture.

.Example3 Highly Discriminating Neighborhood Run
>>> import SchellingSegregationModel

>>> n = likesSameNeighborhood(20,0.6,'X','O',0.5,0.4)

>>> r = run(n,100,True)

...................................
[(0, (0.6836, 0.4932)), (1, (0.4633, 0.5954)), (2, (0.4068, 0.6388)), (3, (0.3333, 0.6898)), (4, (0.2627, 0.7249)), (5, (0.209, 0.7769)),
 (6, (0.1667, 0.8115)), (7, (0.1356, 0.8374)), (8, (0.1243, 0.8707)), (9, (0.1158, 0.8716)), (10, (0.113, 0.8755)), (11, (0.1017, 0.8803)),
 (12, (0.0819, 0.8996)), (13, (0.0819, 0.9025)), (14, (0.0734, 0.9178)), (15, (0.0508, 0.9243)), (16, (0.048, 0.9279)), (17, (0.0424, 0.9398)),
 (18, (0.0424, 0.9414)), (19, (0.048, 0.9384)), (20, (0.0395, 0.944)), (21, (0.0254, 0.9448)), (22, (0.0282, 0.9503)), (23, (0.0226, 0.9535)),
 (24, (0.0254, 0.9527)), (25, (0.0339, 0.9512)), (26, (0.0254, 0.9518)), (27, (0.0226, 0.955)), (28, (0.0198, 0.9551)), (29, (0.0141, 0.9568)),
 (30, (0.0141, 0.9576)), (31, (0.0169, 0.9584)), (32, (0.0141, 0.9569)), (33, (0.0141, 0.9607)), (34, (0.0113, 0.96)), (35, (0.0141, 0.9608)),
 (36, (0.0169, 0.9584)), (37, (0.0169, 0.9592)), (38, (0.0169, 0.9584)), (39, (0.0141, 0.9632)), (40, (0.0113, 0.9616)), (41, (0.0085, 0.964)),
 (42, (0.0113, 0.964)), (43, (0.0169, 0.9602)), (44, (0.0169, 0.9593)), (45, (0.0226, 0.9609)), (46, (0.0141, 0.9624)), (47, (0.0141, 0.9631)),
 (48, (0.0169, 0.9616)), (49, (0.0141, 0.9631)), (50, (0.0141, 0.9602)), (51, (0.0113, 0.9663)), (52, (0.0113, 0.964)), (53, (0.0085, 0.9648)),
 (54, (0.0113, 0.9656)), (55, (0.0085, 0.967)), (56, (0.0056, 0.9679)), (57, (0.0085, 0.9679)), (58, (0.0141, 0.9671)), (59, (0.0113, 0.9656)),
 (60, (0.0113, 0.9648)), (61, (0.0113, 0.9664)), (62, (0.0028, 0.9687)), (63, (0.0028, 0.9688)), (64, (0.0028, 0.9687)), (65, (0.0, 0.9702))]
...................................

As can be seen from the results of Example 3, the neighborhood unhappiness was at 0 and the local similarity at 97% by turn 65. It is particularly interesting to look at *how* the types achieved their seperation.


[width="40%"]
|=========
|-|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X|-|O|O
|-|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X|-|X
|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X
|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X
|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X
|-|-|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X|-
|O|O|O|-|X|X|X|X|X|X|X|X|X|X|X|X|X|X|-|O
|O|O|O|O|-|X|X|X|X|X|X|X|X|X|X|X|-|O|O|O
|O|O|O|O|-|X|X|X|X|X|X|X|X|X|X|-|O|O|O|O
|O|O|O|O|O|-|X|X|X|X|X|X|X|X|-|O|O|O|O|O
|O|O|O|O|O|-|X|X|X|X|X|X|X|-|O|O|O|O|O|O
|O|O|O|O|O|O|-|X|X|X|X|X|-|O|O|O|O|O|O|O
|O|-|-|O|O|O|O|-|X|X|X|-|O|O|O|O|O|O|O|O
|O|-|-|-|O|O|O|O|-|-|O|O|O|O|O|O|O|O|O|O
|-|O|-|X|-|O|O|O|O|O|O|O|O|O|O|O|O|O|O|-
|O|O|-|X|X|-|O|O|O|O|O|O|O|O|O|O|O|O|O|O
|O|O|-|X|X|X|X|-|O|O|O|O|O|O|O|O|O|O|O|O
|O|O|-|X|X|X|X|X|X|-|-|-|-|-|O|O|O|O|O|O
|O|-|X|X|X|X|X|X|X|X|X|X|X|X|X|-|O|O|O|O
|O|-|X|X|X|X|X|X|X|X|X|X|X|X|X|X|-|O|O|O
|=========
[[Figure3]] Figure3 End Result of a Highly Discriminating Neighborhood

Looking at <<Figure3>>, which was taken from the SchellingAfter.csv file, it can be seen that the X's and O's seperated themselves behind walls of empty lots to avoid having the wrong kind of neighbors.
